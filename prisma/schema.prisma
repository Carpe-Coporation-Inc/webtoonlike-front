generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

// TODO join 삭제 시 로직 재조정
// TODO Index 추가

model Admin {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  userId    Int      @unique @map("user_id")
  isSuper   Boolean  @default(false) @map("is_super")

  user User @relation(fields: [userId], references: [id], onDelete: Restrict)

  @@map("admins")
}

model BidRequestMessage {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  bidRequestId Int      @map("bid_request_id")
  userId       Int      @map("user_id")
  content      String   @map("content")

  bidRequest BidRequest @relation(fields: [bidRequestId], references: [id], onDelete: Restrict)
  user       User       @relation(fields: [userId], references: [id], onDelete: Restrict)

  @@map("bid_request_messages")
}

model BidRequest {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // TODO buyer
  userId        Int       @map("user_id")
  roundId       Int       @map("bid_round_id")
  message       String?   @map("message")
  contractRange Json      @map("contract_range")
  acceptedAt    DateTime? @map("accepted_at")
  rejectedAt    DateTime? @map("rejected_at")
  approvedAt    DateTime? @map("approved_at")
  cancelledAt   DateTime? @map("cancelled_at")

  user     User                @relation(fields: [userId], references: [id], onDelete: Restrict)
  bidRound BidRound            @relation(fields: [roundId], references: [id], onDelete: Restrict)
  messages BidRequestMessage[]
  invoices Invoice[]

  @@map("bid_requests")
}

enum BidRoundStatus {
  IDLE        @map("idle")
  WAITING     @map("waiting")
  BIDDING     @map("bidding")
  NEGOTIATING @map("negotiating")
  DONE        @map("done")

  @@map("bid_round_status")
}

model BidRound {
  id                  Int            @id @default(autoincrement())
  createdAt           DateTime       @default(now()) @map("created_at")
  updatedAt           DateTime       @updatedAt @map("updated_at")
  webtoonId           Int            @unique @map("webtoon_id")
  contractRange       Json           @map("contract_range")
  status              BidRoundStatus @map("status")
  isOriginal          Boolean        @map("is_original")
  isNew               Boolean        @map("is_new")
  episodeCount        Int?           @map("episode_count")
  bidStartsAt         DateTime?      @map("bid_starts_at")
  negoStartsAt        DateTime?      @map("nego_starts_at")
  processEndsAt       DateTime?      @map("process_ends_at")
  approvedAt          DateTime?      @map("approved_at")
  disapprovedAt       DateTime?      @map("disapproved_at")
  adminNote           String?        @map("admin_note")
  currentEpisodeNo    Int?           @map("current_episode_no")
  monthlyEpisodeCount Int?           @map("monthly_episode_count")

  webtoon  Webtoon      @relation(fields: [webtoonId], references: [id], onDelete: Restrict)
  requests BidRequest[]

  @@map("bid_rounds")
}

model Buyer {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  userId    Int      @unique @map("user_id")
  company   Json
  purpose   String?

  user User @relation(fields: [userId], references: [id], onDelete: Restrict)

  @@map("buyers")
}

model Creator {
  id                 Int      @id @default(autoincrement())
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @updatedAt @map("updated_at")
  userId             Int      @unique @map("user_id")
  // TODO 데이터 타입 최적화
  name               String
  name_en            String?
  thumbPath          String?  @map("thumb_path")
  isAgencyAffiliated Boolean  @map("is_agency_affiliated")
  isExperienced      Boolean  @map("is_experienced")
  isExposed          Boolean  @map("is_exposed")

  user User @relation(fields: [userId], references: [id], onDelete: Restrict)

  @@map("creators")
}

model Genre {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  label     String   @unique
  label_en  String?  @unique
  rank      Int?

  webtoonLinks XWebtoonGenre[]

  @@map("genres")
}

model Invoice {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  requestId Int      @map("request_id")
  creatorId Int      @map("creator_id")
  buyerId   Int      @map("buyer_id")
  // TODO 무모한 데이터 저장
  dataUri   String   @map("data_uri")

  request BidRequest @relation(fields: [requestId], references: [id], onDelete: Restrict)
  creator User       @relation(name: "CreatorRelation", fields: [creatorId], references: [id], onDelete: Restrict)
  buyer   User       @relation(name: "BuyerRelation", fields: [buyerId], references: [id], onDelete: Restrict)
  User    User?      @relation(fields: [userId], references: [id])
  userId  Int?

  @@map("invoices")
}

model Notification {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  userId    Int      @map("user_id")
  type      String
  message   String
  isRead    Boolean  @default(false) @map("is_read")
  arg       Boolean?

  user User @relation(fields: [userId], references: [id], onDelete: Restrict)

  @@map("notifications")
}

model User {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  sub          String   @unique
  email        String
  phone        String
  userType     UserType @map("user_type")
  country      String?
  postcode     String?
  addressLine1 String?  @map("address_line_1")
  addressLine2 String?  @map("address_line_2")

  admin              Admin?
  bidRequestMessages BidRequestMessage[]
  bidRequests        BidRequest[]
  buyer              Buyer?
  creator            Creator?
  notifications      Notification[]
  webtoons           Webtoon[]
  webtoonLikes       WebtoonLike[]

  // Define relations with unique names for Invoice model
  invoicesAsCreator Invoice[] @relation(name: "CreatorRelation")
  invoicesAsBuyer   Invoice[] @relation(name: "BuyerRelation")
  invoices          Invoice[]

  @@map("users")
}

enum UserType {
  CREATOR @map("creator")
  BUYER   @map("buyer")

  @@map("user_type")
}

model WebtoonEpisodeImage {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  episodeId Int      @map("episode_id")
  host      String?
  path      String
  mimeType  String   @map("mime_type")
  width     Int?
  height    Int?
  rank      Int?

  episode WebtoonEpisode @relation(fields: [episodeId], references: [id], onDelete: Restrict)

  @@map("webtoon_episode_images")
}

model WebtoonEpisode {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  webtoonId   Int      @map("webtoon_id")
  englishUrl  String?  @map("english_url")
  episodeNo   Int      @map("episode_no")
  title       String?
  title_en    String?
  description String?
  // TODO 사용 여부 확인
  thumbPath   String?  @map("thumb_path")

  webtoon Webtoon               @relation(fields: [webtoonId], references: [id], onDelete: Restrict)
  images  WebtoonEpisodeImage[]

  @@unique([webtoonId, episodeNo])
  @@map("webtoon_episodes")
}

model WebtoonLike {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  userId    Int      @map("user_id")
  webtoonId Int      @map("webtoon_id")

  user    User    @relation(fields: [userId], references: [id], onDelete: Restrict)
  webtoon Webtoon @relation(fields: [webtoonId], references: [id], onDelete: Restrict)

  @@unique([userId, webtoonId])
  @@map("webtoon_likes")
}

enum TargetGender {
  MALE   @map("male")
  FEMALE @map("female")

  @@map("target_gender")
}

enum AgeLimit {
  ALL      @map("all")
  TWELVE   @map("twelve")
  FIFTEEN  @map("fifteen")
  EIGHTEEN @map("eighteen")

  @@map("age_limit")
}

enum TargetAge {
  ALL      @map("all")
  TEENS    @map("teens")
  TWENTIES @map("twenties")
  THIRTIES @map("thirties")
  FORTIES  @map("forties")
  FIFTIES  @map("fifties")

  @@map("target_age")
}

model Webtoon {
  id             Int           @id @default(autoincrement())
  createdAt      DateTime      @default(now()) @map("created_at")
  updatedAt      DateTime      @updatedAt @map("updated_at")
  userId         Int           @map("user_id")
  title          String
  title_en       String?
  // TODO string 길이 조정
  description    String?
  description_en String?
  thumbPath      String        @map("thumb_path")
  externalUrl    String?       @map("external_url")
  englishUrl     String?       @map("english_url")
  adultOnly      Boolean       @map("adult_only")
  targetAges     TargetAge[]   @map("target_ages")
  ageLimit       AgeLimit      @map("age_limit")
  targetGender   TargetGender? @map("target_gender")

  user       User             @relation(fields: [userId], references: [id], onDelete: Restrict)
  bidRound   BidRound?
  episodes   WebtoonEpisode[]
  likes      WebtoonLike[]
  genreLinks XWebtoonGenre[]

  @@map("webtoons")
}

model XWebtoonGenre {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  webtoonId Int      @map("webtoon_id")
  genreId   Int      @map("genre_id")

  webtoon Webtoon @relation(fields: [webtoonId], references: [id], onDelete: Restrict)
  genre   Genre   @relation(fields: [genreId], references: [id], onDelete: Restrict)

  @@map("x_webtoon_genres")
}
