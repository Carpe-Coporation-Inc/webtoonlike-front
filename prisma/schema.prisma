generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

// TODO join 삭제 시 로직 재조정
// TODO Index 추가
// TODO zero-length 차단
model Admin {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  userId    Int      @unique @map("user_id")
  isSuper   Boolean  @default(false) @map("is_super")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("admins")
}

enum BidRoundApprovalStatus {
  PENDING     @map("pending")
  APPROVED    @map("approved")
  DISAPPROVED @map("disapproved")

  @@map("bid_round_approval_status")
}

model BidRound {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  webtoonId Int      @map("webtoon_id")
  // 실제로 노출할 최신 웹툰별 라운드 (TODO partial index 적용)
  isActive  Boolean  @map("is_active")

  // 사용자 입력
  contractRange       Json    @map("contract_range")
  isOriginal          Boolean @map("is_original")
  isNew               Boolean @map("is_new")
  totalEpisodeCount   Int?    @map("total_episode_count")
  currentEpisodeNo    Int?    @map("current_episode_no")
  monthlyEpisodeCount Int?    @map("monthly_episode_count")

  // 관리자 승인
  approvalStatus    BidRoundApprovalStatus @default(PENDING) @map("approval_status")
  approvalDecidedAt DateTime?              @map("approval_decided_at")

  // 관리자 투고 관리
  bidStartsAt   DateTime? @map("bid_starts_at")
  negoStartsAt  DateTime? @map("nego_starts_at")
  processEndsAt DateTime? @map("process_ends_at")
  adminNote     String?   @map("admin_note")

  // join용
  webtoon Webtoon @relation(fields: [webtoonId], references: [id], onDelete: Cascade)
  offers  Offer[]

  @@map("bid_rounds")
}

// TODO prisma-json-types-generator
// https://www.prisma.io/docs/orm/prisma-client/special-fields-and-types/working-with-json-fields#typed-json
model Buyer {
  id                      Int      @id @default(autoincrement())
  createdAt               DateTime @default(now()) @map("created_at")
  updatedAt               DateTime @updatedAt @map("updated_at")
  name                    String
  businessField           String[] @map("business_field")
  businessType            String[] @map("business_type")
  department              String
  position                String
  role                    String
  businessNumber          String   @map("business_number")
  thumbPath               String?  @map("thumb_path")
  businessCertificatePath String?  @map("business_certificate_path")
  businessCardPath        String?  @map("business_card_path")
  purpose                 String

  userId Int  @unique @map("user_id")
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("buyers")
}

model Creator {
  id                 Int      @id @default(autoincrement())
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @updatedAt @map("updated_at")
  userId             Int      @unique @map("user_id")
  // TODO 데이터 타입 최적화
  name               String
  name_en            String?
  thumbPath          String?  @map("thumb_path")
  isAgencyAffiliated Boolean  @map("is_agency_affiliated")
  isExperienced      Boolean  @map("is_experienced")
  isExposed          Boolean  @default(false) @map("is_exposed")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("creators")
}

model Genre {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  label     String   @unique
  label_en  String?  @unique
  rank      Int?

  webtoonLinks XWebtoonGenre[]

  @@map("genres")
}

model Invoice {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  content   Json

  offerProposalId Int           @unique @map("offer_id")
  userId          Int           @unique @map("user_id")
  user            User          @relation(fields: [userId], references: [id], onDelete: Restrict)
  offerProposal   OfferProposal @relation(fields: [offerProposalId], references: [id], onDelete: Restrict)

  @@map("invoices")
}

model Notification {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  userId    Int      @map("user_id")
  type      String
  message   String
  isRead    Boolean  @default(false) @map("is_read")
  arg       Boolean?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model Offer {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  bidRoundId Int      @map("bid_round_id")

  bidRound       BidRound        @relation(fields: [bidRoundId], references: [id], onDelete: Restrict)
  offerProposals OfferProposal[]
  user           User            @relation(fields: [userId], references: [id])
  userId         Int

  @@map("offers")
}

enum OfferProposalStatus {
  SUPERSEDED @map("superseded")
  // 아래 셋 중 하나인 상태가 active proposal
  PENDING    @map("pending")
  ACCEPTED   @map("accepted")
  DECLINED   @map("declined")

  @@map("offer_proposal_status")
}

// 유저 입장에서는 status, invoice 등이 OfferProposal이 아닌 Offer와 연결된 것으로 인식될 수 있으나,
// 정확히 어떤 조건을 두고 수락/거절하고 인보이스를 발행한 것인지 integrity를 보장하기 위해
// OfferProposal에 해당 정보를 담았음
model OfferProposal {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  message       String?             @map("message")
  contractRange Json                @map("contract_range")
  status        OfferProposalStatus
  decidedAt     DateTime?           @map("decided_at")

  offerId Int      @map("offer_id")
  userId  Int      @map("user_id")
  offer   Offer    @relation(fields: [offerId], references: [id], onDelete: Restrict)
  user    User     @relation(fields: [userId], references: [id], onDelete: Restrict)
  invoice Invoice?

  @@index([status])
  @@index([status, userId])
  @@map("offer_proposals")
}

model User {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  sub          String   @unique
  email        String
  name         String
  phone        String
  userType     UserType @map("user_type")
  country      String
  postcode     String
  addressLine1 String   @map("address_line_1")
  addressLine2 String   @map("address_line_2")

  admin          Admin?
  // TODO id 대신 수발신 타입으로 구분
  offerProposals OfferProposal[]
  offers         Offer[]
  buyer          Buyer?
  creator        Creator?
  notifications  Notification[]
  webtoons       Webtoon[]
  webtoonLikes   WebtoonLike[]
  invoices       Invoice[]

  @@map("users")
}

enum UserType {
  CREATOR @map("creator")
  BUYER   @map("buyer")

  @@map("user_type")
}

model WebtoonBanner {
  id           String   @id @db.VarChar(255)
  webtoonId    Int      @map("webtoon_id")
  bannerUrl    String   @map("banner_url")
  displayStart DateTime @map("display_start") @db.Timestamp(6)
  displayEnd   DateTime @map("display_end") @db.Timestamp(6)
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt    DateTime @map("updated_at") @db.Timestamp(6)

  webtoon Webtoon @relation(fields: [webtoonId], references: [id], onDelete: Cascade)

  @@map("banners")
}

model WebtoonEpisode {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  webtoonId  Int      @map("webtoon_id")
  englishUrl String?  @map("english_url")
  episodeNo  Int      @map("episode_no")
  imagePaths Json     @map("image_paths")

  webtoon Webtoon @relation(fields: [webtoonId], references: [id], onDelete: Cascade)

  @@unique([webtoonId, episodeNo])
  @@map("webtoon_episodes")
}

model WebtoonLike {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  userId    Int      @map("user_id")
  webtoonId Int      @map("webtoon_id")

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  webtoon Webtoon @relation(fields: [webtoonId], references: [id], onDelete: Cascade)

  @@unique([userId, webtoonId])
  @@map("webtoon_likes")
}

enum TargetGender {
  ALL    @map("all")
  MALE   @map("male")
  FEMALE @map("female")

  @@map("target_gender")
}

enum AgeLimit {
  ALL      @map("all")
  TWELVE   @map("twelve")
  FIFTEEN  @map("fifteen")
  EIGHTEEN @map("eighteen")

  @@map("age_limit")
}

enum TargetAge {
  TEENS    @map("teens")
  TWENTIES @map("twenties")
  THIRTIES @map("thirties")
  FORTIES  @map("forties")
  FIFTIES  @map("fifties")

  @@map("target_age")
}

model Webtoon {
  id              Int          @id @default(autoincrement())
  createdAt       DateTime     @default(now()) @map("created_at")
  updatedAt       DateTime     @updatedAt @map("updated_at")
  userId          Int          @map("user_id")
  title           String
  title_en        String
  // TODO string 길이 조정
  description     String?
  description_en  String?
  authorName      String?      @map("author_name")
  authorName_en   String?      @map("author_name_en")
  thumbPath       String       @map("thumb_path")
  externalUrl     String?      @map("external_url")
  targetAges      TargetAge[]  @map("target_ages")
  ageLimit        AgeLimit     @map("age_limit")
  targetGender    TargetGender @map("target_gender")
  isFeaturedAsNew Boolean      @default(false) @map("is_featured_as_new")

  user           User             @relation(fields: [userId], references: [id], onDelete: Restrict)
  bidRounds      BidRound[]
  episodes       WebtoonEpisode[]
  likes          WebtoonLike[]
  genreLinks     XWebtoonGenre[]
  webtoonBanners WebtoonBanner[]

  @@map("webtoons")
}

model XWebtoonGenre {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  webtoonId Int      @map("webtoon_id")
  genreId   Int      @map("genre_id")

  webtoon Webtoon @relation(fields: [webtoonId], references: [id], onDelete: Cascade)
  genre   Genre   @relation(fields: [genreId], references: [id], onDelete: Restrict)

  @@map("x_webtoon_genres")
}
